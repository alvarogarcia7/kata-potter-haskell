(require 'clojure.math.combinatorics)
(clojure.math.combinatorics/combinations [1,2,3] 1)
(clojure.math.combinatorics/combinations [1,2,3] 2)
(clojure.math.combinatorics/combinations [1,2,3] 3)
(range 4)
(range 1 4)
(map #(clojure.math.combinatorics/combinations [1 2 3] %) (range 1 4))
(map identity (map #(clojure.math.combinatorics/combinations [1 2 3] %) (range 1 4)))
(def combs (map #(clojure.math.combinatorics/combinations [1 2 3] %) (range 1 4)))
combs
(mapcat identity combs)
(def combs2 (mapcat identity combs))
combs2
(clojure.set/difference #{1 2} #{3})
(clojure.set/difference #{1 2} #{3 1})
(def books [1,2,3])
books
(clojure.set/difference (set books) (set combs2))
combs2
(map #(clojure.set/difference (set books) (set %)) combs2)
(map vector (map #(clojure.set/difference (set books) (set %)) combs2) combs2)
